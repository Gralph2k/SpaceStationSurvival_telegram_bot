# -*- coding: utf-8 -*-
import random
import time
import logging
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–∞—É–∑
import os  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
from telegram.error import BadRequest  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# –£–º–µ–Ω—å—à–∏–º "–±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å" –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = ""
TIME_LIMIT = 600  # 10 –º–∏–Ω—É—Ç

# ======================================================
# –ö–õ–ê–°–°–´ –ò –î–ê–ù–ù–´–ï –ò–ó –ò–ì–†–´ (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ V2)
# ======================================================


class Player:
    def __init__(self):
        self.health = 100
        self.hunger = 0
        self.thirst = 0
        self.radiation = 0
        self.infection = 0
        self.inventory = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (str)
        self.weapon = None  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è (str) –∏–ª–∏ None
        self.has_gasmask = False
        self.has_armor = False
        self.backpack_size = 5

    def is_alive(self):
        return (
            self.health > 0
            and self.infection < 100
            and self.radiation < 100
            and self.hunger < 100
            and self.thirst < 100
        )

    def inventory_limit(self):
        return self.backpack_size


# –ü—Ä–µ–¥–º–µ—Ç—ã (—Å–ª–æ–≤–∞—Ä–∏ —É–¥–æ–±–Ω—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É)
items = {
    "water": {"name": "–ë—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã", "usable": True},
    "food": {"name": "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫", "usable": True},
    "medkit": {"name": "–ê–ø—Ç–µ—á–∫–∞", "usable": True},
    "antivirus": {"name": "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã–π —à–ø—Ä–∏—Ü", "usable": True},
    "gasmask": {"name": "–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑", "usable": False, "equipable": True},
    "ammo": {"name": "–ü–∞—Ç—Ä–æ–Ω—ã", "usable": False},
    "pistol": {"name": "–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø–ª–∞–∑–º–∞—Ç—Ä–æ–Ω", "usable": False, "equipable": True},
    "armor": {"name": "–ë—Ä–æ–Ω—è", "usable": False, "equipable": True},
    "big_backpack": {"name": "–ë–æ–ª—å—à–æ–π —Ä—é–∫–∑–∞–∫", "usable": False, "equipable": True},
    # "captain_keycard": {"name": "–ö–ª—é—á-–∫–∞—Ä—Ç–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞", "usable": False} # –ï—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å
}

# –ú–æ–Ω—Å—Ç—Ä—ã (—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É)
monsters_data = {
    "stalker": {
        "name": "–ú—É—Ç–∞–Ω—Ç-—Å—Ç–∞–ª–∫–µ—Ä",
        "health": 50,
        "full_health": 50,
        "damage": 15,
        "desc": "–í–¥—Ä—É–≥ –∏–∑ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–π —à–∞—Ö—Ç—ã –≤—ã–ø–æ–ª–∑–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ ‚Äî –ø–∞—Ä–æ–¥–∏—è –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –µ–≥–æ –∫–æ–∂–∞ —á—ë—Ä–Ω–∞—è –∏ –ø–æ–∫—Ä—ã—Ç–∞ —è–∑–≤–∞–º–∏.",
        "loot": ["ammo"],  # –ö–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞
    },
    "horror": {
        "name": "–†–∞–∑–¥—É—Ç—ã–π —É–∂–∞—Å",
        "health": 80,
        "full_health": 80,
        "damage": 25,
        "desc": "–ò–∑ —Ç—å–º—ã –Ω–∞ –≤–∞—Å –∏–¥–µ—Ç –æ–≥—Ä–æ–º–Ω–∞—è –∫–æ–ª—ã—à–∞—â–∞—è—Å—è –º–∞—Å—Å–∞ –≤ –æ–±—Ä—ã–≤–∫–∞—Ö –ª–µ—Ç–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞.",
        "loot": ["antivirus"],  # –ö–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞
    },
    "captain": {
        "name": "–ó–æ–º–±–∏-–∫–∞–ø–∏—Ç–∞–Ω",
        "health": 120,
        "full_health": 120,
        "damage": 30,
        "desc": "–£ —à—Ç—É—Ä–≤–∞–ª–∞ —Å—Ç–æ–∏—Ç —Ñ–∏–≥—É—Ä–∞ –≤ –∏—Å—Ç–ª–µ–≤—à–µ–π –∫–∞–ø–∏—Ç–∞–Ω—Å–∫–æ–π —Ñ–æ—Ä–º–µ. –û–Ω–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, –∏ –ø—É—Å—Ç—ã–µ –≥–ª–∞–∑–Ω–∏—Ü—ã —É—Å—Ç—Ä–µ–º–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—Å.",
        "is_boss": True,  # –§–ª–∞–≥ –±–æ—Å—Å–∞
        "loot": [],  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á-–∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞: ["captain_keycard"]
    },
}

# –õ–æ–∫–∞—Ü–∏–∏
locations = {
    "medbay": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—Å–µ–∫",
    "engineering": "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —Ü–µ—Ö",
    "quarters": "–ñ–∏–ª—ã–µ –æ—Ç—Å–µ–∫–∏",
    "reactor": "–†–µ–∞–∫—Ç–æ—Ä–Ω—ã–π –±–ª–æ–∫",
    "laboratory": "–ì–ª–∞–≤–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
    "bridge": "–ú–æ—Å—Ç–∏–∫ –∫–æ—Ä–∞–±–ª—è",
}

# ======================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ò–ì–†–´ –î–õ–Ø –ë–û–¢–ê
# ======================================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ö–ª—é—á: chat_id, –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
game_states = {}


def get_user_state(chat_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id not in game_states:
        game_states[chat_id] = {
            "player": Player(),
            "current_location_key": None,  # –ù–∞—á–∏–Ω–∞–µ–º –≤–Ω–µ –ª–æ–∫–∞—Ü–∏–∏
            "captain_defeated": False,
            "bridge_puzzle_attempted": False,  # –ü—ã—Ç–∞–ª—Å—è –ª–∏ —Ä–µ—à–∏—Ç—å –∑–∞–≥–∞–¥–∫—É
            "puzzle_code": None,  # –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ –º–æ—Å—Ç–∏–∫
            "start_time": time.time(),
            "last_action_time": time.time(),
            "current_monster": None,  # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –±–æ—é {–∫–ª—é—á: –¥–∞–Ω–Ω—ã–µ_–∫–æ–ø–∏—è}
            "expected_input": None,  # –ß—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç ('location', 'fight', 'item', 'puzzle_code', None)
            "last_message_id": None,  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–æ—Å—Ç—É–ø–µ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
    # game_states[chat_id]['last_action_time'] = time.time()
    return game_states[chat_id]


def reset_user_state(chat_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    if chat_id in game_states:
        del game_states[chat_id]
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ, —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return get_user_state(chat_id)


def check_time_bot(user_state: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏–≥—Ä—ã –¥–ª—è –±–æ—Ç–∞."""
    elapsed_time = time.time() - user_state["start_time"]
    return elapsed_time <= TIME_LIMIT


def get_time_warning(user_state: dict) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ."""
    elapsed_time = time.time() - user_state["start_time"]
    remaining_time = TIME_LIMIT - elapsed_time
    if 0 < remaining_time < 60:
        return f"\n‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã!*"
    return None


# ======================================================
# –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ï –ò–ì–†–û–í–´–ï –§–£–ù–ö–¶–ò–ò (–∏–∑ V2)
# ======================================================


def get_status_text(player: Player) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞."""
    status = (
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}% üíß –ñ–∞–∂–¥–∞: {player.thirst}% | üçû –ì–æ–ª–æ–¥: {player.hunger}%\n"
        f"‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è: {player.radiation}% | ‚ò£Ô∏è –ò–Ω—Ñ–µ–∫—Ü–∏—è: {player.infection}%"
    )
    inventory_items = [
        items[key]["name"] for key in player.inventory
    ]  # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ –∫–ª—é—á–∞–º
    inventory_str = ", ".join(inventory_items) if inventory_items else "–ü—É—Å—Ç–æ"
    inventory = f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ({len(player.inventory)}/{player.inventory_limit()}): {inventory_str}"

    equipped = []
    if player.weapon:
        equipped.append(player.weapon)  # –•—Ä–∞–Ω–∏–º –∏–º—è –æ—Ä—É–∂–∏—è
    if player.has_armor:
        equipped.append(items["armor"]["name"])
    if player.has_gasmask:
        equipped.append(items["gasmask"]["name"])
    equipment = f"üîß –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞: {', '.join(equipped)}" if equipped else ""

    return f"{status}\n{inventory}\n{equipment}"


def progress_status_bot(user_state: dict) -> list[str]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–∏–∑ V2)."""
    player = user_state["player"]
    messages = []

    # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    hunger_increase = random.randint(4, 7)
    thirst_increase = random.randint(5, 8)
    player.hunger = min(player.hunger + hunger_increase, 100)
    player.thirst = min(player.thirst + thirst_increase, 100)

    if player.hunger >= 80 and player.hunger < 100:
        messages.append("–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω—ã–π –≥–æ–ª–æ–¥...")
    if player.thirst >= 80 and player.thirst < 100:
        messages.append("–í–∞—Å –º—É—á–∞–µ—Ç —Å–∏–ª—å–Ω–∞—è –∂–∞–∂–¥–∞...")
    if player.hunger >= 100:
        messages.append("–ò—Å—Ç–æ—â–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ–¥–∞ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–∏–ª—ã!")
        player.health -= 15
    if player.thirst >= 100:
        messages.append("–û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–∏–ª—ã!")
        player.health -= 15

    # –û–∫—Ä—É–∂–µ–Ω–∏–µ
    if not player.has_gasmask:
        toxic_air_effect = random.randint(3, 6)
        player.infection = min(player.infection + toxic_air_effect, 100)
        messages.append(f"–í—ã –¥—ã—à–∏—Ç–µ —Ç–æ–∫—Å–∏—á–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º (+{toxic_air_effect}% ‚ò£Ô∏è).")
        if player.infection >= 100:
            messages.append("–ò–Ω—Ñ–µ–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ö–≤–∞—Ç–∏–ª–∞ –≤–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º!")
            player.health = 0  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å –æ—Ç –∏–Ω—Ñ–µ–∫—Ü–∏–∏

    rad_increase = random.randint(0, 4)
    if rad_increase > 0:
        player.radiation = min(player.radiation + rad_increase, 100)
        messages.append(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∞–¥–∏–∞—Ü–∏–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–ª—Å—è (+{rad_increase}% ‚ò¢Ô∏è).")
        if player.radiation >= 100:
            messages.append("–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –¥–æ–∑—É —Ä–∞–¥–∏–∞—Ü–∏–∏!")
            player.health = 0  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å –æ—Ç —Ä–∞–¥–∏–∞—Ü–∏–∏

    player.health = max(0, player.health)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ —É—à–ª–æ –≤ –º–∏–Ω—É—Å
    return messages


def search_area_bot(user_state: dict, location_key: str) -> list[str]:
    """–û–±—ã—Å–∫–∏–≤–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–∏–∫–∞ –∏–∑ V2)."""
    player = user_state["player"]
    location_name = locations.get(location_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")

    messages = [f"–í—ã –æ–±—ã—Å–∫–∏–≤–∞–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é '{location_name}'..."]
    found_count = 0

    for _ in range(2):  # –î–≤–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        if random.randint(1, 100) <= 60:  # 60% —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∑–∞ –ø–æ–ø—ã—Ç–∫—É
            possible_items_keys = list(items.keys())
            weights = [1.0] * len(possible_items_keys)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º float –¥–ª—è –≤–µ—Å–æ–≤

            # –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞
            for i, item_key in enumerate(possible_items_keys):
                is_equip = items[item_key].get("equipable", False)
                already_have = (
                    (item_key == "pistol" and player.weapon)
                    or (item_key == "gasmask" and player.has_gasmask)
                    or (item_key == "armor" and player.has_armor)
                    or (item_key == "big_backpack" and player.backpack_size > 5)
                )
                if is_equip and already_have:
                    weights[i] = 0.1  # –°–∏–ª—å–Ω–æ —Ä–µ–∂–µ–º —à–∞–Ω—Å –¥—É–±–ª–∏–∫–∞—Ç–∞
                elif is_equip:
                    weights[i] = 0.5  # –†–µ–∂–µ–º —à–∞–Ω—Å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Ü–µ–ª–æ–º
                elif item_key == "ammo" and not player.weapon:
                    weights[i] = 0.2  # –ú–µ–Ω—å—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø–∞—Ç—Ä–æ–Ω—ã –±–µ–∑ –æ—Ä—É–∂–∏—è

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Å–∞ –Ω—É–ª–µ–≤—ã–µ
            total_weight = sum(weights)
            if total_weight <= 0:
                continue  # –ù–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å

            found_item_key = random.choices(possible_items_keys, weights=weights, k=1)[
                0
            ]
            item_info = items[found_item_key]
            item_name = item_info["name"]

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ ---
            if found_item_key == "gasmask":
                if not player.has_gasmask:
                    player.has_gasmask = True
                    messages.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –Ω–∞–¥–µ—Ç–æ: {item_name}")
                    found_count += 1
            elif found_item_key == "armor":
                if not player.has_armor:
                    player.has_armor = True
                    messages.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –Ω–∞–¥–µ—Ç–æ: {item_name}")
                    found_count += 1
            elif found_item_key == "big_backpack":
                if player.backpack_size == 5:
                    player.backpack_size = 10
                    messages.append(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω {item_name}! –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {player.backpack_size}."
                    )
                    found_count += 1
            elif found_item_key == "pistol":
                if not player.weapon:
                    player.weapon = item_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ—Ä—É–∂–∏—è
                    messages.append(f"üî´ –ù–∞–π–¥–µ–Ω–æ –æ—Ä—É–∂–∏–µ: {item_name}!")
                    # –î–∞—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã
                    if len(player.inventory) < player.inventory_limit():
                        player.inventory.append("ammo")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–∞—Ç—Ä–æ–Ω–æ–≤
                        messages.append("‚ö°Ô∏è –í –∫–æ–º–ø–ª–µ–∫—Ç–µ –±—ã–ª–∏ –ø–∞—Ç—Ä–æ–Ω—ã.")
                    found_count += 1
            else:  # –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–≤–æ–¥–∞, –µ–¥–∞, –∞–ø—Ç–µ—á–∫–∞, –∞–Ω—Ç–∏–≤–∏—Ä—É—Å, –ø–∞—Ç—Ä–æ–Ω—ã)
                if len(player.inventory) < player.inventory_limit():
                    player.inventory.append(found_item_key)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞
                    messages.append(f"‚ûï –ù–∞–π–¥–µ–Ω–æ: {item_name}")
                    found_count += 1
                else:
                    messages.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω {item_name}, –Ω–æ –≤ —Ä—é–∫–∑–∞–∫–µ –Ω–µ—Ç –º–µ—Å—Ç–∞!")

    if found_count == 0:
        messages.append("–ù–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
    return messages


def get_random_monster_key() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ (–Ω–µ –±–æ—Å—Å–∞)."""
    available_monsters = [k for k, v in monsters_data.items() if not v.get("is_boss")]
    if not available_monsters:
        return None
    return random.choice(available_monsters)


def get_monster_status_text(monster_health: int, monster_full_health: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–∞."""
    share = monster_health / monster_full_health if monster_full_health > 0 else 0
    if share <= 0:
        return "–º—ë—Ä—Ç–≤"
    if share <= 0.25:
        return "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º—ë—Ä—Ç–≤"
    if share <= 0.5:
        return "—Å–ª–∞–±"
    if share <= 0.75:
        return "—Ä–∞–Ω–µ–Ω"
    return "–∑–¥–æ—Ä–æ–≤"


# ======================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–†
# ======================================================


def build_main_keyboard(user_state: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'."""
    player = user_state["player"]
    keyboard = []
    # –ö–Ω–æ–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–π
    for key, name in locations.items():
        button_text = name
        callback_data = f"loc_{key}"
        if key == "bridge":
            if not user_state["captain_defeated"]:
                button_text += " (–ü—Ä–µ–≥—Ä–∞–∂–¥–µ–Ω!)"
            elif not user_state["bridge_puzzle_attempted"]:
                button_text += " (–°–≤–æ–±–æ–¥–µ–Ω)"
            else:  # –ö–∞–ø–∏—Ç–∞–Ω –ø–æ–±–µ–∂–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞
                button_text += " (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)"
                # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –¥–∞—Ç—å –∏–Ω—Ñ–æ-–∫–æ–ª–±—ç–∫
                # callback_data = "info_bridge_locked"

        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=callback_data)]
        )

    # –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if player.inventory:
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üéí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="inventory_open"
                )
            ]
        )
    else:
        # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", callback_data="info_inventory_empty"
                )
            ]
        )

    return InlineKeyboardMarkup(keyboard)


def build_inventory_keyboard(player: Player) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
    keyboard = []
    if not player.inventory:
        keyboard.append(
            [InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", callback_data="inventory_close")]
        )
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        item_counts = {}
        for item_key in player.inventory:
            item_counts[item_key] = item_counts.get(item_key, 0) + 1

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        item_keys_in_inventory = sorted(item_counts.keys())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
        for item_key in item_keys_in_inventory:
            item_info = items[item_key]
            item_name = item_info["name"]
            count = item_counts[item_key]
            button_text = f"{item_name} x{count}"

            if item_info.get("usable", False):
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {button_text}",
                            callback_data=f"item_use_{item_key}",
                        )
                    ]
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{button_text} (–ü–∞—Å—Å–∏–≤–Ω—ã–π)",
                            callback_data=f"info_item_passive_{item_key}",
                        )
                    ]
                )

        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚ùå –ó–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory_close"
                )
            ]
        )
    return InlineKeyboardMarkup(keyboard)


def build_fight_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—è."""
    keyboard = [
        [
            InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="fight_attack"),
            InlineKeyboardButton("üèÉ –£–±–µ–∂–∞—Ç—å", callback_data="fight_flee"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# ======================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
# ======================================================


async def send_image(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, image_path: str
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        base_path = "SpaceStationSurvival\\images\\"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        with open(base_path + image_path, "rb") as image_file:
            await context.bot.send_photo(chat_id=chat_id, photo=image_file)
    except Exception as e:
        logger.error(f"Error sending image to {chat_id}: {e}")


async def edit_or_send_message(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    text: str,
    reply_markup: InlineKeyboardMarkup | None = None,
    message_id: int | None = None,
):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ."""
    new_message_id = None
    message_id = None
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è *–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π*
            )
            new_message_id = message_id
        except BadRequest as e:
            if "Message is not modified" in str(e):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
                new_message_id = message_id
                pass
            elif "message to edit not found" in str(e):
                logger.warning(
                    f"Message {message_id} to edit not found for chat {chat_id}. Sending new one."
                )
                message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            else:
                logger.error(
                    f"Failed to edit message {message_id} for chat {chat_id}: {e}"
                )
                message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        except Exception as e:
            logger.error(
                f"Unexpected error editing message {message_id} for chat {chat_id}: {e}"
            )
            message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ

    if not message_id:  # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ –±—ã–ª–æ ID
        sent_message = await context.bot.send_message(
            chat_id, text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN
        )
        new_message_id = sent_message.message_id

    return new_message_id


async def show_main_screen(
    update: Update | None,
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    message_to_edit_id: int | None = None,
    extra_messages: list[str] | None = None,
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω: —Å—Ç–∞—Ç—É—Å, –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏/–ø—Ä–µ–¥–º–µ—Ç–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç user_state['last_message_id'].
    """
    user_state = get_user_state(chat_id)
    player = user_state["player"]

    # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –ü–ï–†–ï–î –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if not player.is_alive():
        await send_game_over(update, context, chat_id, "player_dead")
        return
    if not check_time_bot(user_state):
        await send_game_over(update, context, chat_id, "time_out")
        return

    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    status_text = get_status_text(player)
    time_warning = get_time_warning(user_state)
    message_lines = []
    if extra_messages:
        message_lines.extend(extra_messages)
        message_lines.append("-" * 20)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    message_lines.append(status_text)
    if time_warning:
        message_lines.append(time_warning)
    message_lines.append("\n–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?")

    message_text = "\n".join(message_lines)

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_main_keyboard(user_state)
    user_state["expected_input"] = "location"  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message_id = await edit_or_send_message(
        context, chat_id, message_text, keyboard, message_to_edit_id
    )
    user_state["last_message_id"] = new_message_id


# ======================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–û–õ–ë–≠–ö–û–í TELEGRAM
# ======================================================


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É."""
    chat_id = update.effective_chat.id
    logger.info(f"User {chat_id} started the game.")
    user_state = reset_user_state(chat_id)  # –°–±—Ä–æ—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

    welcome_text = (
        "=== –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é '–ì–µ–ª–∏–æ—Å-9' ===\n\n"
        "–¢—å–º–∞.\n"
        "–¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –≤ —Å–µ–±—è –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∫–∞–ø—Å—É–ª–µ. –í —É—à–∞—Ö –∑–≤–µ–Ω–∏—Ç.\n"
        "–ù–∞ —è–∑—ã–∫–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–≤–∫—É—Å. –° —Ç—Ä—É–¥–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –≥–ª–∞–∑–∞ ‚Äî\n"
        "–∞–≤–∞—Ä–∏–π–Ω—ã–µ –æ–≥–Ω–∏ –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º. –°—Ç–∞–Ω—Ü–∏—è '–ì–µ–ª–∏–æ—Å-9' –ª–µ–∂–∏—Ç –≤ –∞–≥–æ–Ω–∏–∏.\n"
        "–¢–≤–æ–∏ –ª—ë–≥–∫–∏–µ —Å–∂–∏–º–∞—é—Ç—Å—è –æ—Ç –∑–ª–æ–≤–æ–Ω–Ω–æ–≥–æ, —Ç—è–∂—ë–ª–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞.\n"
        "–ì–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–∞—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏ ‚Äî –æ—Ç–¥–∞–ª—ë–Ω–Ω—ã–µ —Å—Ç–æ–Ω—ã\n"
        "–∏–ª–∏ —Å–∫—Ä–µ–∂–µ—Ç –∫–æ–≥—Ç–µ–π –ø–æ –º–µ—Ç–∞–ª–ª—É...\n\n"
        "*–¢–≤–æ—è —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —Å–±–µ–∂–∞—Ç—å.*"
    )
    current_directory = os.getcwd()
    print(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {current_directory}")
    await send_image(update, context, chat_id, "locations/hall.jpeg")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    await show_main_screen(update, context, chat_id)


async def handle_location_choice(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, loc_key: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏."""
    user_state = get_user_state(chat_id)
    player = user_state["player"]
    loc_name = locations.get(loc_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    message_id_to_edit = user_state.get("last_message_id")

    turn_messages = []  # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç —Ö–æ–¥

    # --- –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ú–æ—Å—Ç–∏–∫–∞ ---
    if loc_key == "bridge":
        if not user_state["captain_defeated"]:
            turn_messages.append(
                f"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–π—Ç–∏ –Ω–∞ '{loc_name}', –Ω–æ –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç..."
            )
            # –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            captain_data = monsters_data["captain"].copy()  # –ë–µ—Ä–µ–º –∫–æ–ø–∏—é
            user_state["current_monster"] = {
                "key": "captain",
                "data": captain_data,
            }  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∏ –¥–∞–Ω–Ω—ã–µ
            user_state["expected_input"] = "fight"
            await send_image(update, context, chat_id, "monsters/captain.jpeg")
            monster_status_text = (
                f"{captain_data['desc']}\n\n*–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–¥–∞–µ—Ç {captain_data['name']}!*"
            )
            fight_keyboard = build_fight_keyboard()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–º
            status_now = get_status_text(player)
            new_msg_id = await edit_or_send_message(
                context,
                chat_id,
                f"{monster_status_text}\n\n{status_now}",
                fight_keyboard,
                message_id_to_edit,
            )
            user_state["last_message_id"] = new_msg_id
            return  # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é

        elif not user_state["bridge_puzzle_attempted"]:
            turn_messages.append(f"–í—ã –≤—Ö–æ–¥–∏—Ç–µ –Ω–∞ '{loc_name}'. –ü—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω.")
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥–∞–¥–∫—É
            await start_bridge_puzzle(
                update, context, chat_id, message_id_to_edit, turn_messages
            )
            return  # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        else:  # –ö–∞–ø–∏—Ç–∞–Ω –ø–æ–±–µ–∂–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞
            turn_messages.append(
                f"–í—ã —Å–Ω–æ–≤–∞ –Ω–∞ '{loc_name}'. –¢–µ—Ä–º–∏–Ω–∞–ª —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            await show_main_screen(
                update, context, chat_id, message_id_to_edit, turn_messages
            )
            return

    # --- –û–±—ã—á–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ ---
    else:
        user_state["current_location_key"] = loc_key
        # turn_messages.append(f"–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ '{loc_name}'.")

        # 1. –û–±—ã—Å–∫ –ª–æ–∫–∞—Ü–∏–∏
        await send_image(update, context, chat_id, "locations/" + loc_key + ".jpeg")
        search_results = search_area_bot(user_state, loc_key)
        turn_messages.extend(search_results)

        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        # temp_msg_id = await edit_or_send_message(
        #    context, chat_id, "\n".join(turn_messages), None, message_id_to_edit
        # )
        # user_state["last_message_id"] = temp_msg_id  # –û–±–Ω–æ–≤–ª—è–µ–º ID
        # await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

        if not player.is_alive():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±—ã—Å–∫–∞
            await send_game_over(update, context, chat_id, "player_dead")
            return

        # 2. –°–ª—É—á–∞–π–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞
        encounter_chance = 40  # 40%
        if random.randint(1, 100) <= encounter_chance:
            monster_key = get_random_monster_key()
            if monster_key:
                monster_data = monsters_data[monster_key].copy()
                await send_image(
                    update, context, chat_id, "monsters/" + monster_key + ".jpeg"
                )
                user_state["current_monster"] = {
                    "key": monster_key,
                    "data": monster_data,
                }
                user_state["expected_input"] = "fight"
                monster_status_text = f"{monster_data['desc']}\n\n*–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–¥–∞–µ—Ç {monster_data['name']}!*"
                fight_keyboard = build_fight_keyboard()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è –±–æ–π
                status_now = get_status_text(player)
                new_msg_id = await edit_or_send_message(
                    context,
                    chat_id,
                    f"{monster_status_text}\n\n{status_now}",
                    fight_keyboard,
                    user_state["last_message_id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID
                )
                user_state["last_message_id"] = new_msg_id
                return  # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
            else:
                turn_messages.append("–í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏, –Ω–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç–µ.")
        else:
            turn_messages.append("–í –ª–æ–∫–∞—Ü–∏–∏ —Ç–∏—Ö–æ.")

        # 3. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –±–æ—è)
        progress_msgs = progress_status_bot(user_state)
        if progress_msgs:
            turn_messages.append("-" * 20)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            turn_messages.extend(progress_msgs)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await show_main_screen(
            update, context, chat_id, user_state["last_message_id"], turn_messages
        )


async def handle_fight_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, action: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –±–æ—é (–∞—Ç–∞–∫–∞ –∏–ª–∏ –ø–æ–±–µ–≥)."""
    user_state = get_user_state(chat_id)
    player = user_state["player"]
    monster_info = user_state.get("current_monster")
    message_id_to_edit = user_state.get("last_message_id")

    if not monster_info or user_state.get("expected_input") != "fight":
        logger.warning(f"Unexpected fight action from {chat_id} when not in fight.")
        await show_main_screen(
            update,
            context,
            chat_id,
            message_id_to_edit,
            ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è."],
        )
        return

    monster_key = monster_info["key"]
    monster = monster_info["data"]  # –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–∞
    monster_name = monster["name"]
    monster_full_health = monster["full_health"]

    fight_log = []  # –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –±–æ—è –∑–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥

    if action == "attack":
        # –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        player_damage = 0
        if player.weapon == items["pistol"]["name"]:
            try:
                # –ò—â–µ–º –∫–ª—é—á "ammo" –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                ammo_index = player.inventory.index("ammo")
                player.inventory.pop(ammo_index)  # –¢—Ä–∞—Ç–∏–º –æ–¥–∏–Ω –ø–∞—Ç—Ä–æ–Ω (–∫–ª—é—á)
                player_damage = random.randint(25, 40)
                fight_log.append(
                    f"üí• –í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –∏–∑ –ø–ª–∞–∑–º–∞—Ç—Ä–æ–Ω–∞! (-1 {items['ammo']['name']})"
                )
            except ValueError:
                player_damage = random.randint(5, 10)
                fight_log.append("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤! –í—ã –±—å–µ—Ç–µ –∫—É–ª–∞–∫–∞–º–∏!")
        else:  # –†—É–∫–æ–ø–∞—à–Ω–∞—è
            player_damage = random.randint(5, 10)
            fight_log.append("üëä –í—ã –±—å–µ—Ç–µ –∫—É–ª–∞–∫–∞–º–∏!")

        monster["health"] -= player_damage
        monster["health"] = max(0, monster["health"])  # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
        monster_status_text = get_monster_status_text(
            monster["health"], monster_full_health
        )
        fight_log.append(
            f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –ú–æ–Ω—Å—Ç—Ä {monster_status_text}"
        )

        if monster["health"] <= 0:
            # –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω
            fight_log.append(f"\nüèÜ *–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {monster_name}!*")
            # --- –õ—É—Ç ---
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ monsters_data –ø–æ –∫–ª—é—á—É
            original_monster_data = monsters_data.get(monster_key, {})
            if original_monster_data.get("loot"):
                for item_loot_key in original_monster_data["loot"]:
                    if len(player.inventory) < player.inventory_limit():
                        player.inventory.append(item_loot_key)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –ª—É—Ç–∞
                        fight_log.append(f"‚ú® –í—ã –Ω–∞—à–ª–∏: {items[item_loot_key]['name']}")
                    else:
                        fight_log.append(
                            f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω {items[item_loot_key]['name']}, –Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–∞!"
                        )

            # --- –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –ö–∞–ø–∏—Ç–∞–Ω ---
            if monster.get("is_boss"):
                user_state["captain_defeated"] = True
                fight_log.append("\n*–ü—É—Ç—å –Ω–∞ –º–æ—Å—Ç–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω!*")
                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥–∞–¥–∫–µ
                await start_bridge_puzzle(
                    update, context, chat_id, message_id_to_edit, fight_log
                )
                user_state["current_monster"] = None  # –£–±–∏—Ä–∞–µ–º –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                return

            # –û–±—ã—á–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω
            user_state["current_monster"] = None
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –ø–æ–±–µ–¥—ã –∏ –ª—É—Ç–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
            temp_msg_id = await edit_or_send_message(
                context, chat_id, "\n".join(fight_log), None, message_id_to_edit
            )
            user_state["last_message_id"] = temp_msg_id
            await asyncio.sleep(2.5)

            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –±–æ—è
            progress_msgs = progress_status_bot(user_state)
            await show_main_screen(
                update, context, chat_id, user_state["last_message_id"], progress_msgs
            )
            return

    elif action == "flee":
        escape_chance = 60
        if random.randint(1, 100) <= escape_chance:
            fight_log.append("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!")
            await send_image(update, context, chat_id, "locations/hall.jpeg")
            user_state["current_monster"] = None
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–≥–µ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
            temp_msg_id = await edit_or_send_message(
                context, chat_id, "\n".join(fight_log), None, message_id_to_edit
            )
            user_state["last_message_id"] = temp_msg_id
            await asyncio.sleep(1.5)
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
            progress_msgs = progress_status_bot(user_state)
            await show_main_screen(
                update, context, chat_id, user_state["last_message_id"], progress_msgs
            )
            return
        else:
            fight_log.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!")
            # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–±–µ–≥–∞

    # –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –∂–∏–≤ –∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–±–µ–∂–∞–ª/–Ω–µ –ø–æ–±–µ–¥–∏–ª)
    if monster["health"] > 0:
        monster_damage = monster["damage"]
        if player.has_armor:
            reduction = 0.3
            absorbed = int(monster_damage * reduction)
            monster_damage -= absorbed
            fight_log.append(f"üõ°Ô∏è –ë—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ {absorbed} —É—Ä–æ–Ω–∞.")
        player.health -= monster_damage
        player.health = max(0, player.health)
        fight_log.append(f"ü©∏ {monster_name} –Ω–∞–Ω–æ—Å–∏—Ç –≤–∞–º {monster_damage} —É—Ä–æ–Ω–∞!")

        if not player.is_alive():
            fight_log.append(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.health}%")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —É–¥–∞—Ä–æ–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
            temp_msg_id = await edit_or_send_message(
                context, chat_id, "\n".join(fight_log), None, message_id_to_edit
            )
            user_state["last_message_id"] = temp_msg_id
            await asyncio.sleep(1.5)
            await send_game_over(update, context, chat_id, "player_dead")
            return

    # –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = get_status_text(player)
    fight_keyboard = build_fight_keyboard()
    monster_status_text = get_monster_status_text(
        monster["health"], monster_full_health
    )
    fight_message = (
        f"{monster_name} {monster_status_text}\n"
        f"{'-'*40}\n"
        f"{'\n'.join(fight_log)}\n"
        f"{'-'*40}\n"
        f"{status_text}"
    )
    new_msg_id = await edit_or_send_message(
        context, chat_id, fight_message, fight_keyboard, message_id_to_edit
    )
    user_state["last_message_id"] = new_msg_id


async def handle_inventory_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, callback_data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–æ—Ç–∫—Ä—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ, –∏–Ω—Ñ–æ)."""
    user_state = get_user_state(chat_id)
    player = user_state["player"]
    message_id_to_edit = user_state.get("last_message_id")
    query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç query –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    if callback_data == "inventory_open":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –±–æ—é –ª–∏ –º—ã
        if user_state.get("expected_input") == "fight":
            await query.answer(
                "–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ –≤—Ä–µ–º—è –±–æ—è!", show_alert=True
            )
            return

        inventory_keyboard = build_inventory_keyboard(player)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id_to_edit,
                reply_markup=inventory_keyboard,
            )
            user_state["expected_input"] = "item"  # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Ç–∞–∫–∞—è
            else:
                logger.error(f"Error editing markup for inventory: {e}")
        except Exception as e:
            logger.error(f"Unexpected error editing markup for inventory: {e}")

    elif callback_data == "inventory_close":
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–±–µ–∑ –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–π)
        await show_main_screen(update, context, chat_id, message_id_to_edit)

    elif callback_data.startswith("item_use_"):
        item_key_to_use = callback_data[len("item_use_") :]
        use_messages = []
        item_used_successfully = False

        if item_key_to_use in player.inventory:
            item_info = items[item_key_to_use]
            item_name = item_info["name"]

            if item_info.get("usable", False):
                player.inventory.remove(
                    item_key_to_use
                )  # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
                use_messages.append(f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {item_name}.")
                item_used_successfully = True

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
                if item_key_to_use == "water":
                    player.thirst = max(player.thirst - 40, 0)
                    use_messages.append("–ñ–∞–∂–¥–∞ —É—Ç–æ–ª–µ–Ω–∞.")
                elif item_key_to_use == "food":
                    player.hunger = max(player.hunger - 40, 0)
                    use_messages.append("–ì–æ–ª–æ–¥ —É—Ç–æ–ª–µ–Ω.")
                elif item_key_to_use == "medkit":
                    player.health = min(player.health + 50, 100)
                    use_messages.append("–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                elif item_key_to_use == "antivirus":
                    player.infection = max(player.infection - 60, 0)
                    use_messages.append("–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞ –∑–∞–º–µ–¥–ª–µ–Ω–æ.")
                # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            else:
                # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç.–∫. –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                use_messages.append(f"‚ö†Ô∏è {item_name} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é.")
                await query.answer(
                    f"{item_name} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é.", show_alert=True
                )

        else:
            use_messages.append("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
            await query.answer("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        temp_msg_id = await edit_or_send_message(
            context, chat_id, "\n".join(use_messages), None, message_id_to_edit
        )
        user_state["last_message_id"] = temp_msg_id
        await asyncio.sleep(1.5)

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞
        progress_msgs = []
        if item_used_successfully:
            progress_msgs = progress_status_bot(user_state)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –±—ã–ª–∏)
        await show_main_screen(
            update, context, chat_id, user_state["last_message_id"], progress_msgs
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–∏—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω)
    elif callback_data.startswith("info_"):
        if "inventory_empty" in callback_data:
            await query.answer(
                "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", show_alert=False
            )  # –ú–æ–∂–Ω–æ –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å alert
        elif "item_passive" in callback_data:
            item_key = callback_data[len("info_item_passive_") :]
            item_name = items.get(item_key, {}).get("name", "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç")
            if item_key == "ammo":
                await query.answer(
                    f"{item_name} –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç—Ä–µ–ª—å–±–µ.",
                    show_alert=True,
                )
            elif items.get(item_key, {}).get("equipable"):
                await query.answer(
                    f"{item_name} —ç–∫–∏–ø–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏.",
                    show_alert=True,
                )
            else:
                await query.answer(
                    f"{item_name} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é.", show_alert=True
                )
        elif "bridge_locked" in callback_data:
            await query.answer(
                "–¢–µ—Ä–º–∏–Ω–∞–ª –º–æ—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
                show_alert=True,
            )
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ info –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


async def start_bridge_puzzle(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    message_id_to_edit: int,
    intro_messages: list[str] | None = None,
):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥–∞–¥–∫—É –Ω–∞ –º–æ—Å—Ç–∏–∫–µ."""
    user_state = get_user_state(chat_id)
    user_state["expected_input"] = "puzzle_code"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –Ω–∞ –º–æ—Å—Ç–∏–∫ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
    if user_state.get("puzzle_code") is None:
        user_state["puzzle_code"] = str(random.randint(1000, 9999))
        logger.info(
            f"Generated puzzle code for {chat_id}: {user_state['puzzle_code']}"
        )  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    puzzle_intro = [
        "–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É –º–æ—Å—Ç–∏–∫–∞.",
        "–ù–∞ —ç–∫—Ä–∞–Ω–µ –º–µ—Ä—Ü–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞.",
    ]
    if intro_messages:
        puzzle_intro = intro_messages + ["-" * 20] + puzzle_intro

    puzzle_text = "\n".join(puzzle_intro) + "\n\n*–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ [3 –ø–æ–ø—ã—Ç–∫–∏]:*"

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∂–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    new_msg_id = await edit_or_send_message(
        context, chat_id, puzzle_text, None, message_id_to_edit
    )
    user_state["last_message_id"] = new_msg_id


async def handle_puzzle_input(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏."""
    chat_id = update.effective_chat.id
    user_state = get_user_state(chat_id)
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –≤ user_state['last_message_id']
    message_id_to_edit = user_state.get("last_message_id")

    if user_state.get("expected_input") != "puzzle_code":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–æ–¥
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–µ–π—á–∞—Å."
        # await update.message.reply_text("–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    try:
        await context.bot.delete_message(chat_id, update.message.message_id)
    except Exception as e:
        logger.warning(f"Could not delete user puzzle input message: {e}")

    attempt = update.message.text.strip()
    result_message = ""
    puzzle_solved = False
    puzzle_failed = False

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ start_bridge_puzzle)
    correct_code = user_state.get("puzzle_code")
    if not correct_code:
        logger.error(f"Puzzle code not found in state for chat {chat_id}!")
        await context.bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –ø–æ–∑–∂–µ.",
        )
        user_state["expected_input"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        await asyncio.sleep(2)
        await show_main_screen(update, context, chat_id, message_id_to_edit)
        return

    # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –¥–∞–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ—Å—Å–∏—é –≤–≤–æ–¥–∞
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ bridge_puzzle_attempted

    if not attempt.isdigit() or len(attempt) != 4:
        result_message = (
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
    else:
        if attempt == correct_code:
            result_message = (
                "‚úÖ *–ö–û–î –ü–†–ò–ù–Ø–¢*\n"
                "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–∏—Ä–µ–Ω—ã –≤–∑–≤—ã–ª–∏!\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–ø—Å—É–ª—ã!"
            )
            puzzle_solved = True
            # –ù–µ –æ—Ç–º–µ—á–∞–µ–º bridge_puzzle_attempted = True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        else:
            result_message = "‚ùå *–î–û–°–¢–£–ü –û–¢–ö–õ–û–ù–ï–ù*\n"
            # –î–∞–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)
            if int(attempt) < int(correct_code):
                result_message += "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –±–æ–ª—å—à–µ.\n"
            else:
                result_message += "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –º–µ–Ω—å—à–µ.\n"

            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–¥–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª
            result_message += "\n*–¢–µ—Ä–º–∏–Ω–∞–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è!*"
            puzzle_failed = True
            user_state["bridge_puzzle_attempted"] = True  # –û—Ç–º–µ—á–∞–µ–º –Ω–µ—É–¥–∞—á—É

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    new_msg_id = await edit_or_send_message(
        context, chat_id, result_message, None, message_id_to_edit
    )
    user_state["last_message_id"] = new_msg_id
    await asyncio.sleep(2.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    if puzzle_solved:
        await send_game_over(update, context, chat_id, "win_bridge")
    elif puzzle_failed:
        user_state["expected_input"] = None  # –ë–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º –∫–æ–¥
        await show_main_screen(
            update,
            context,
            chat_id,
            user_state["last_message_id"],
            ["–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∑–ª–æ–º–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª."],
        )  # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    else:  # –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ (–Ω–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –Ω–µ —Ç–∞ –¥–ª–∏–Ω–∞)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        puzzle_intro = [
            "–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É –º–æ—Å—Ç–∏–∫–∞.",
            "–ù–∞ —ç–∫—Ä–∞–Ω–µ –º–µ—Ä—Ü–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞.",
        ]
        puzzle_text = (
            "\n".join(puzzle_intro) + f"\n\n{result_message}"
        )  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        new_msg_id = await edit_or_send_message(
            context, chat_id, puzzle_text, None, user_state["last_message_id"]
        )
        user_state["last_message_id"] = new_msg_id
        # user_state['expected_input'] –æ—Å—Ç–∞–µ—Ç—Å—è 'puzzle_code'


async def callback_query_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
    # –û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å alert
    # await query.answer() # –£–±—Ä–∞–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ handle_inventory_action

    chat_id = query.message.chat_id
    callback_data = query.data
    user_state = get_user_state(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    logger.info(
        f"Callback from {chat_id}: {callback_data} | Expected: {user_state.get('expected_input')}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥
    current_expected = user_state.get("expected_input")

    try:
        # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback_data ---
        if callback_data.startswith("loc_") and current_expected == "location":
            await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
            loc_key = callback_data.split("_")[1]
            await handle_location_choice(update, context, chat_id, loc_key)

        elif callback_data.startswith("fight_") and current_expected == "fight":
            await query.answer()
            action = callback_data.split("_")[1]
            await handle_fight_action(update, context, chat_id, action)

        elif (
            callback_data.startswith("inventory_")
            or callback_data.startswith("item_use_")
            or callback_data.startswith("info_")
        ) and (current_expected == "location" or current_expected == "item"):
            # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –∏–∑ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ
            # –û—Ç–≤–µ—Ç –Ω–∞ query –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ handle_inventory_action
            await handle_inventory_action(update, context, chat_id, callback_data)

        # elif callback_data.startswith("info_"): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –∏–Ω—Ñ–æ-–∫–Ω–æ–ø–æ–∫ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤—ã—à–µ
        #      await handle_inventory_action(update, context, chat_id, callback_data)

        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logger.warning(
                f"Unexpected callback '{callback_data}' for state '{current_expected}' from {chat_id}"
            )
            await query.answer(
                "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.", show_alert=True
            )

    except Exception as e:
        logger.exception(
            f"Error processing callback '{callback_data}' for chat {chat_id}: {e}"
        )
        try:
            await query.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True
            )
        except Exception:  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫ –Ω–µ —É–¥–∞–ª—Å—è
            pass
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        try:
            await show_main_screen(
                update,
                context,
                chat_id,
                user_state.get("last_message_id"),
                ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."],
            )
        except Exception as final_e:
            logger.error(
                f"Failed to return user {chat_id} to main screen after error: {final_e}"
            )


async def send_game_over(
    update: Update | None, context: ContextTypes.DEFAULT_TYPE, chat_id: int, reason: str
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    user_state = game_states.get(chat_id)
    if not user_state:
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å

    player = user_state["player"]
    elapsed_time = int(time.time() - user_state["start_time"])
    final_message = "=== –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ===\n"

    if reason == "win_bridge":
        await send_image(update, context, chat_id, "status/win.jpeg")
        final_message += (
            "\n–°–∏—Ä–µ–Ω—ã –≤–æ—é—Ç! –¢–∞–π–º–µ—Ä —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!\n"
            "–í—ã –±–µ–∂–∏—Ç–µ –∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–ø—Å—É–ª–µ –∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É —Å—Ç–∞—Ä—Ç—É–µ—Ç–µ...\n"
            "–°—Ç–∞–Ω—Ü–∏—è '–ì–µ–ª–∏–æ—Å-9' –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–∑–∞–¥–∏ –≤–∞—Å —è—Ä–∫–æ–π –≤—Å–ø—ã—à–∫–æ–π!\n\n"
            "üéâ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–ë–ï–î–û–ô!* üéâ"
        )
    elif reason == "player_dead":
        await send_image(update, context, chat_id, "status/lose.jpeg")
        final_message += "\n–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ '–ì–µ–ª–∏–æ—Å-9'.\n*–ü—Ä–∏—á–∏–Ω–∞:* "
        if player.health <= 0:
            final_message += "–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–Ω—ã."
        elif player.hunger >= 100:
            final_message += "–°–º–µ—Ä—Ç—å –æ—Ç –≥–æ–ª–æ–¥–∞."
        elif player.thirst >= 100:
            final_message += "–°–º–µ—Ä—Ç—å –æ—Ç –∂–∞–∂–¥—ã."
        elif player.infection >= 100:
            final_message += "–ò–Ω—Ñ–µ–∫—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–º."
        elif player.radiation >= 100:
            final_message += "–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –¥–æ–∑–∞ —Ä–∞–¥–∏–∞—Ü–∏–∏."
        else:
            final_message += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤)."
        final_message += "\n\nüíÄ *–ö–û–ù–ï–¶ –ò–ì–†–´* üíÄ"
    elif reason == "time_out":
        final_message += (
            "\n–í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–∏—Å—Ç–µ–º—ã –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ.\n"
            "–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —Å–ø–∞—Å—Ç–∏—Å—å –≤–æ–≤—Ä–µ–º—è.\n\n"
            "üíÄ *–ö–û–ù–ï–¶ –ò–ì–†–´* üíÄ"
        )
    else:
        final_message += "\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ."

    final_message += f"\n\n*–í—Ä–µ–º—è –≤—ã–∂–∏–≤–∞–Ω–∏—è:* {elapsed_time} —Å–µ–∫—É–Ω–¥."
    final_message += "\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start"

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    last_msg_id = user_state.get("last_message_id")
    if last_msg_id:
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.edit_message_reply_markup(
                chat_id, last_msg_id, reply_markup=None
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    await context.bot.send_message(
        chat_id, final_message, parse_mode=ParseMode.MARKDOWN
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in game_states:
        del game_states[chat_id]
    logger.info(f"Game over for user {chat_id}. Reason: {reason}")


# ======================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
# ======================================================
def get_bot_token(token_file: str):
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        with open(token_file, "r", encoding="utf-8") as f:
            return f.readline().strip()
        if not TOKEN:
            logger.error(
                f"–§–∞–π–ª '{token_file}' –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã."
            )
            return None  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ TOKEN None, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    except FileNotFoundError:
        logger.error(
            f"–§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º '{token_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞."
        )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º '{token_file}': {e}")
        return None


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    TOKEN = get_bot_token("SpaceStationSurvival\\bot_token")
    print(TOKEN)
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å /help, /status (–ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ —Ö–æ–¥–∞) –∏ —Ç.–¥.

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∑–∞–≥–∞–¥–∫–∏)
    # –û–Ω –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_puzzle_input)
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES
    )  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π


if __name__ == "__main__":
    main()
