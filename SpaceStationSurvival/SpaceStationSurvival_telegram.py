# -*- coding: utf-8 -*-
import random
import time
import logging
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–∞—É–∑

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram ---
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = "7739893547:AAFLu8HPySBvGWbuyQIbsgIzlpXslUg2hyU" # !!! –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù !!!
TIME_LIMIT = 600 # 10 –º–∏–Ω—É—Ç

# ======================================================
# –ö–õ–ê–°–°–´ –ò –î–ê–ù–ù–´–ï –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ò–ì–†–´ (—Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è–º–∏)
# ======================================================

class Player:
    # ... (–ö–ª–∞—Å—Å Player –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ —Ç–∞–∫–∏–º –∂–µ) ...
    def __init__(self):
        self.health = 100
        self.hunger = 0
        self.thirst = 0
        self.radiation = 0
        self.infection = 0
        self.inventory = []
        self.weapon = None
        self.has_gasmask = False
        self.has_armor = False
        self.backpack_size = 5
        # –£–±—Ä–∞–Ω—ã —Ñ–ª–∞–≥–∏ –º–æ—Å—Ç–∏–∫–∞, –æ–Ω–∏ –±—É–¥—É—Ç –≤ –æ–±—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def is_alive(self):
        return (
            self.health > 0
            and self.infection < 100
            and self.radiation < 100
            and self.hunger < 100
            and self.thirst < 100
        )

    def inventory_limit(self):
        return self.backpack_size

# –ü—Ä–µ–¥–º–µ—Ç—ã (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏)
items = {
    "water": "–ë—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã", "food": "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫", "medkit": "–ê–ø—Ç–µ—á–∫–∞",
    "antivirus": "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã–π —à–ø—Ä–∏—Ü", "gasmask": "–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑", "ammo": "–ü–∞—Ç—Ä–æ–Ω—ã",
    "pistol": "–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø–ª–∞–∑–º–∞—Ç—Ä–æ–Ω", "armor": "–ë—Ä–æ–Ω—è", "big_backpack": "–ë–æ–ª—å—à–æ–π —Ä—é–∫–∑–∞–∫",
}

# –ú–æ–Ω—Å—Ç—Ä—ã
monsters_data = { # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∏
    "stalker": {
        "name": "–ú—É—Ç–∞–Ω—Ç-—Å—Ç–∞–ª–∫–µ—Ä", "health": 50, "full_health": 50, "damage": 15,
        "desc": "–í–¥—Ä—É–≥ –∏–∑ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–π —à–∞—Ö—Ç—ã –≤—ã–ø–æ–ª–∑–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ...",
        "loot": ["ammo"] # –ü—Ä–∏–º–µ—Ä –ª—É—Ç–∞
    },
    "horror": {
        "name": "–†–∞–∑–¥—É—Ç—ã–π —É–∂–∞—Å", "health": 80, "full_health": 80, "damage": 25,
        "desc": "–ò–∑ —Ç—å–º—ã –Ω–∞ –≤–∞—Å –∏–¥–µ—Ç –æ–≥—Ä–æ–º–Ω–∞—è –∫–æ–ª—ã—à–∞—â–∞—è—Å—è –º–∞—Å—Å–∞...",
        "loot": ["antivirus"]
    },
    "captain": {
        "name": "–ó–æ–º–±–∏-–∫–∞–ø–∏—Ç–∞–Ω", "health": 120, "full_health": 120, "damage": 30,
        "desc": "–£ —à—Ç—É—Ä–≤–∞–ª–∞ —Å—Ç–æ–∏—Ç —Ñ–∏–≥—É—Ä–∞ –≤ –∏—Å—Ç–ª–µ–≤—à–µ–π –∫–∞–ø–∏—Ç–∞–Ω—Å–∫–æ–π —Ñ–æ—Ä–º–µ...",
        "is_boss": True, # –§–ª–∞–≥ –±–æ—Å—Å–∞
        "loot": [] # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á-–∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    },
}

# –õ–æ–∫–∞—Ü–∏–∏
locations = {
    "medbay": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—Å–µ–∫", "engineering": "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —Ü–µ—Ö",
    "quarters": "–ñ–∏–ª—ã–µ –æ—Ç—Å–µ–∫–∏", "reactor": "–†–µ–∞–∫—Ç–æ—Ä–Ω—ã–π –±–ª–æ–∫",
    "laboratory": "–ì–ª–∞–≤–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "bridge": "–ú–æ—Å—Ç–∏–∫ –∫–æ—Ä–∞–±–ª—è"
}

# ======================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ò–ì–†–´ –î–õ–Ø –ë–û–¢–ê
# ======================================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ö–ª—é—á: chat_id, –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
game_states = {}

def get_user_state(chat_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_id not in game_states:
        game_states[chat_id] = {
            'player': Player(),
            'current_location_key': None, # –ù–∞—á–∏–Ω–∞–µ–º –≤–Ω–µ –ª–æ–∫–∞—Ü–∏–∏
            'captain_defeated': False,
            'bridge_puzzle_attempted': False,
            'puzzle_attempts_left': 3,
            'puzzle_code': None, # –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ –º–æ—Å—Ç–∏–∫
            'start_time': time.time(),
            'last_action_time': time.time(),
            'current_monster': None, # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –±–æ—é
            'expected_input': None, # –ß—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç ('location', 'fight', 'item', 'puzzle_code')
            'last_message_id': None, # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–æ—Å—Ç—É–ø–µ
    game_states[chat_id]['last_action_time'] = time.time()
    return game_states[chat_id]

def reset_user_state(chat_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    if chat_id in game_states:
        del game_states[chat_id]
    return get_user_state(chat_id) # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def check_time_bot(user_state: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏–≥—Ä—ã –¥–ª—è –±–æ—Ç–∞."""
    elapsed_time = time.time() - user_state['start_time']
    return elapsed_time <= TIME_LIMIT

def get_time_warning(user_state: dict) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ."""
    elapsed_time = time.time() - user_state['start_time']
    if TIME_LIMIT - elapsed_time < 60 and TIME_LIMIT - elapsed_time > 0:
         return f"\n[–í–†–ï–ú–Ø] –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã!"
    return None

# ======================================================
# –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ï –ò–ì–†–û–í–´–ï –§–£–ù–ö–¶–ò–ò
# ======================================================

def get_status_text(player: Player) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞."""
    status = (
        f"[–°–¢–ê–¢–£–°] ‚ù§Ô∏è{player.health}% | "
        f"üíß{player.thirst}% | üçû{player.hunger}% | "
        f"‚ò¢Ô∏è{player.radiation}% | ‚ò£Ô∏è{player.infection}%"
    )
    inventory_str = ', '.join(player.inventory) if player.inventory else '–ü—É—Å—Ç–æ'
    inventory = f"[–ò–ù–í–ï–ù–¢–ê–†–¨] ({len(player.inventory)}/{player.inventory_limit()}): {inventory_str}"
    equipped = []
    if player.weapon: equipped.append(player.weapon)
    if player.has_armor: equipped.append(items["armor"])
    if player.has_gasmask: equipped.append(items["gasmask"])
    equipment = f"[–≠–ö–ò–ü–ò–†–û–í–ö–ê]: {', '.join(equipped)}" if equipped else ""
    return f"{status}\n{inventory}\n{equipment}"

def progress_status_bot(user_state: dict) -> list[str]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    player = user_state['player']
    messages = []

    # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    hunger_increase = random.randint(4, 7)
    thirst_increase = random.randint(5, 8)
    player.hunger = min(player.hunger + hunger_increase, 100)
    player.thirst = min(player.thirst + thirst_increase, 100)

    if player.hunger >= 80: messages.append("–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω—ã–π –≥–æ–ª–æ–¥...")
    if player.thirst >= 80: messages.append("–í–∞—Å –º—É—á–∞–µ—Ç —Å–∏–ª—å–Ω–∞—è –∂–∞–∂–¥–∞...")
    if player.hunger >= 100:
        messages.append("–ò—Å—Ç–æ—â–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ–¥–∞ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–∏–ª—ã!")
        player.health -= 15
    if player.thirst >= 100:
        messages.append("–û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç —Å–∏–ª—ã!")
        player.health -= 15

    # –û–∫—Ä—É–∂–µ–Ω–∏–µ
    if not player.has_gasmask:
        toxic_air_effect = random.randint(3, 6)
        player.infection = min(player.infection + toxic_air_effect, 100)
        messages.append(f"–í—ã –¥—ã—à–∏—Ç–µ —Ç–æ–∫—Å–∏—á–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º (+{toxic_air_effect}% ‚ò£Ô∏è).")
        if player.infection >= 100:
             messages.append("–ò–Ω—Ñ–µ–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ö–≤–∞—Ç–∏–ª–∞ –≤–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º!")
             player.health = 0 # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å

    rad_increase = random.randint(0, 4)
    if rad_increase > 0:
        player.radiation = min(player.radiation + rad_increase, 100)
        messages.append(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∞–¥–∏–∞—Ü–∏–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–ª—Å—è (+{rad_increase}% ‚ò¢Ô∏è).")
        if player.radiation >= 100:
             messages.append("–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –¥–æ–∑—É —Ä–∞–¥–∏–∞—Ü–∏–∏!")
             player.health = 0 # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å

    player.health = max(0, player.health)
    return messages

def search_area_bot(user_state: dict, location_key: str) -> list[str]:
    """–û–±—ã—Å–∫–∏–≤–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π."""
    player = user_state['player']
    location_name = locations.get(location_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")
    messages = [f"–í—ã –æ–±—ã—Å–∫–∏–≤–∞–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é '{location_name}'..."]
    found_count = 0

    for _ in range(2): # –î–≤–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        if random.randint(1, 100) <= 60:
            # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) ---
            possible_items_keys = list(items.keys())
            # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–µ—Å–æ–≤ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –Ω–æ –ø–æ–∫–∞ —É–ø—Ä–æ—Å—Ç–∏–º
            found_item_key = random.choice(possible_items_keys)
            item_name = items[found_item_key]

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ ---
            # (–ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π search_area)
            if found_item_key == "gasmask" and not player.has_gasmask:
                 player.has_gasmask = True
                 messages.append(f"–í—ã –Ω–∞—à–ª–∏ –∏ –Ω–∞–¥–µ–ª–∏: {item_name}")
                 found_count += 1
            elif found_item_key == "armor" and not player.has_armor:
                 player.has_armor = True
                 messages.append(f"–í—ã –Ω–∞—à–ª–∏ –∏ –Ω–∞–¥–µ–ª–∏: {item_name}")
                 found_count += 1
            elif found_item_key == "big_backpack" and player.backpack_size == 5:
                 player.backpack_size = 10
                 messages.append(f"–í—ã –Ω–∞—à–ª–∏: {item_name}! –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —É–≤–µ–ª–∏—á–µ–Ω.")
                 found_count += 1
            elif found_item_key == "pistol" and not player.weapon:
                 player.weapon = item_name
                 messages.append(f"–í—ã –Ω–∞—à–ª–∏ –æ—Ä—É–∂–∏–µ: {item_name}!")
                 # –î–∞—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã
                 if len(player.inventory) < player.inventory_limit():
                     player.inventory.append(items["ammo"])
                     messages.append("–í –∫–æ–º–ø–ª–µ–∫—Ç–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤.")
                 found_count += 1
            elif found_item_key not in ["gasmask", "armor", "big_backpack", "pistol"]:
                 if len(player.inventory) < player.inventory_limit():
                     player.inventory.append(item_name)
                     messages.append(f"–í—ã –Ω–∞—à–ª–∏: {item_name}")
                     found_count += 1
                 else:
                     messages.append(f"–í—ã –Ω–∞—à–ª–∏ {item_name}, –Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–∞!")

    if found_count == 0:
        messages.append("–ù–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
    return messages

def get_random_monster_key() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ (–Ω–µ –±–æ—Å—Å–∞)."""
    available_monsters = [k for k, v in monsters_data.items() if not v.get('is_boss')]
    if not available_monsters: return None
    return random.choice(available_monsters)

# ======================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–†
# ======================================================

def build_main_keyboard(user_state: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'."""
    player = user_state['player']
    keyboard = []
    # –ö–Ω–æ–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–π
    for key, name in locations.items():
        button_text = name
        callback_data = f"loc_{key}"
        if key == "bridge":
            if not user_state['captain_defeated']:
                button_text += " (–ü—Ä–µ–≥—Ä–∞–∂–¥–µ–Ω!)"
            elif not user_state['bridge_puzzle_attempted']:
                button_text += " (–°–≤–æ–±–æ–¥–µ–Ω)"
            else:
                button_text += " (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)"
                callback_data = "info_bridge_locked" # –ù–µ –¥–∞–µ–º –≤–æ–π—Ç–∏, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –ö–Ω–æ–ø–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if player.inventory:
        keyboard.append([InlineKeyboardButton("üéí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="inventory_open")])
    else:
        keyboard.append([InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", callback_data="info_inventory_empty")])

    return InlineKeyboardMarkup(keyboard)

def build_inventory_keyboard(player: Player) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."""
    keyboard = []
    if not player.inventory:
        keyboard.append([InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", callback_data="inventory_close")])
    else:
        for idx, item_name in enumerate(player.inventory):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            item_key = next((k for k, v in items.items() if v == item_name), None)
            if item_key not in ["ammo", "pistol", "armor", "gasmask", "big_backpack"]:
                 keyboard.append([InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {item_name}", callback_data=f"item_use_{idx}")])
            else:
                 keyboard.append([InlineKeyboardButton(f"{item_name} (–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)", callback_data=f"info_item_passive_{idx}")])

        keyboard.append([InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory_close")])
    return InlineKeyboardMarkup(keyboard)

def build_fight_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—è."""
    keyboard = [
        [
            InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="fight_attack"),
            InlineKeyboardButton("üèÉ –£–±–µ–∂–∞—Ç—å", callback_data="fight_flee"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ======================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–û–õ–ë–≠–ö–û–í TELEGRAM
# ======================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É."""
    chat_id = update.effective_chat.id
    logger.info(f"User {chat_id} started the game.")
    user_state = reset_user_state(chat_id) # –°–±—Ä–æ—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

    welcome_text = (
        "=== –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é '–ì–µ–ª–∏–æ—Å-9' ===\n\n"
        "–¢—å–º–∞. –¢—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –≤ —Å–µ–±—è –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∫–∞–ø—Å—É–ª–µ...\n"
        "(–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è)\n\n"
        "–í–∞—à–∞ —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —Å–±–µ–∂–∞—Ç—å."
    )
    await update.message.reply_text(welcome_text)
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ–ø—Ü–∏–∏
    await show_main_screen(update, context, chat_id)

async def show_main_screen(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_to_edit_id: int | None = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω: —Å—Ç–∞—Ç—É—Å –∏ –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏/–ø—Ä–µ–¥–º–µ—Ç–∞."""
    user_state = get_user_state(chat_id)
    player = user_state['player']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if not player.is_alive():
        await send_game_over(update, context, chat_id, "player_dead")
        return
    if not check_time_bot(user_state):
        await send_game_over(update, context, chat_id, "time_out")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = get_status_text(player)
    time_warning = get_time_warning(user_state)
    message_text = status_text + (f"\n{time_warning}" if time_warning else "") + "\n\n–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?"

    keyboard = build_main_keyboard(user_state)
    user_state['expected_input'] = 'location' # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_to_edit_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_to_edit_id,
                text=message_text,
                reply_markup=keyboard
            )
            user_state['last_message_id'] = message_to_edit_id
        except Exception as e: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            logger.warning(f"Failed to edit message {message_to_edit_id}: {e}")
            sent_message = await context.bot.send_message(chat_id, message_text, reply_markup=keyboard)
            user_state['last_message_id'] = sent_message.message_id
    else:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if user_state.get('last_message_id'):
             try:
                 await context.bot.delete_message(chat_id, user_state['last_message_id'])
             except Exception: pass # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å

        sent_message = await context.bot.send_message(chat_id, message_text, reply_markup=keyboard)
        user_state['last_message_id'] = sent_message.message_id


async def handle_location_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, loc_key: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏."""
    user_state = get_user_state(chat_id)
    player = user_state['player']
    loc_name = locations.get(loc_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    message_id_to_edit = user_state.get('last_message_id')

    turn_messages = [] # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç —Ö–æ–¥

    # --- –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ú–æ—Å—Ç–∏–∫–∞ ---
    if loc_key == "bridge":
        if not user_state['captain_defeated']:
            turn_messages.append(f"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–π—Ç–∏ –Ω–∞ '{loc_name}', –Ω–æ –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç...")
            # –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            captain_data = monsters_data['captain'].copy() # –ë–µ—Ä–µ–º –∫–æ–ø–∏—é
            user_state['current_monster'] = captain_data
            user_state['expected_input'] = 'fight'
            monster_status_text = f"{captain_data['desc']}\n[–û–ü–ê–°–ù–û–°–¢–¨] –ù–∞ –≤–∞—Å –Ω–∞–ø–∞–¥–∞–µ—Ç {captain_data['name']}!"
            fight_keyboard = build_fight_keyboard()
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=message_id_to_edit,
                text=f"{monster_status_text}\n\n{get_status_text(player)}", # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–æ—é
                reply_markup=fight_keyboard
            )
            return # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
        elif not user_state['bridge_puzzle_attempted']:
             turn_messages.append(f"–í—ã –≤—Ö–æ–¥–∏—Ç–µ –Ω–∞ '{loc_name}'. –ü—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω.")
             # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥–∞–¥–∫—É
             await start_bridge_puzzle(update, context, chat_id, message_id_to_edit)
             return # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        else: # –ö–∞–ø–∏—Ç–∞–Ω –ø–æ–±–µ–∂–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞
             turn_messages.append(f"–í—ã —Å–Ω–æ–≤–∞ –Ω–∞ '{loc_name}'. –¢–µ—Ä–º–∏–Ω–∞–ª —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
             # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
             await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(turn_messages))
             await asyncio.sleep(2) # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
             await show_main_screen(update, context, chat_id)
             return

    # --- –û–±—ã—á–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ ---
    else:
        user_state['current_location_key'] = loc_key
        turn_messages.append(f"–í—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ '{loc_name}'.")

        # 1. –û–±—ã—Å–∫ –ª–æ–∫–∞—Ü–∏–∏
        search_results = search_area_bot(user_state, loc_key)
        turn_messages.extend(search_results)
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(turn_messages))
        await asyncio.sleep(1.5) # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

        if not player.is_alive(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±—ã—Å–∫–∞ (–º–∞–ª–æ –ª–∏ —á—Ç–æ)
             await send_game_over(update, context, chat_id, "player_dead")
             return

        # 2. –°–ª—É—á–∞–π–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞
        encounter_chance = 40 # 40%
        if random.randint(1, 100) <= encounter_chance:
            monster_key = get_random_monster_key()
            if monster_key:
                monster_data = monsters_data[monster_key].copy()
                user_state['current_monster'] = monster_data
                user_state['expected_input'] = 'fight'
                monster_status_text = f"{monster_data['desc']}\n[–û–ü–ê–°–ù–û–°–¢–¨] –ù–∞ –≤–∞—Å –Ω–∞–ø–∞–¥–∞–µ—Ç {monster_data['name']}!"
                fight_keyboard = build_fight_keyboard()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è –±–æ–π
                await context.bot.edit_message_text(
                    chat_id=chat_id, message_id=message_id_to_edit,
                    text=f"{monster_status_text}\n\n{get_status_text(player)}",
                    reply_markup=fight_keyboard
                )
                return # –í—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
            else:
                 turn_messages.append("–í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏, –Ω–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç–µ.")
        else:
            turn_messages.append("–í –ª–æ–∫–∞—Ü–∏–∏ —Ç–∏—Ö–æ.")

        # 3. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –±–æ—è)
        progress_msgs = progress_status_bot(user_state)
        turn_messages.extend(progress_msgs)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(turn_messages))
        await asyncio.sleep(2) # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
        if not player.is_alive():
             await send_game_over(update, context, chat_id, "player_dead")
             return

        await show_main_screen(update, context, chat_id) # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞


async def handle_fight_action(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, action: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –±–æ—é (–∞—Ç–∞–∫–∞ –∏–ª–∏ –ø–æ–±–µ–≥)."""
    user_state = get_user_state(chat_id)
    player = user_state['player']
    monster = user_state.get('current_monster')
    message_id_to_edit = user_state.get('last_message_id')

    if not monster or user_state.get('expected_input') != 'fight':
        logger.warning(f"Unexpected fight action from {chat_id} when not in fight.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await show_main_screen(update, context, chat_id, message_id_to_edit)
        return

    fight_log = [] # –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –±–æ—è –∑–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥

    if action == "attack":
        # –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        player_damage = 0
        if player.weapon == items["pistol"]:
            try:
                ammo_index = player.inventory.index(items["ammo"])
                player.inventory.pop(ammo_index)
                player_damage = random.randint(25, 40)
                fight_log.append(f"–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –∏–∑ –ø–ª–∞–∑–º–∞—Ç—Ä–æ–Ω–∞! (-1 {items['ammo']})")
            except ValueError:
                player_damage = random.randint(5, 10)
                fight_log.append("–ù–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤! –í—ã –±—å–µ—Ç–µ –∫—É–ª–∞–∫–∞–º–∏!")
        else: # –†—É–∫–æ–ø–∞—à–Ω–∞—è
            player_damage = random.randint(5, 10)
            fight_log.append("–í—ã –±—å–µ—Ç–µ –∫—É–ª–∞–∫–∞–º–∏!")

        monster['health'] -= player_damage
        monster['health'] = max(0, monster['health']) # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
        fight_log.append(f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–Ω—Å—Ç—Ä–∞: {monster['health']}/{monster['full_health']}")

        if monster['health'] <= 0:
            # –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω
            fight_log.append(f"\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {monster['name']}!")
            # --- –õ—É—Ç ---
            loot_key = next((k for k, v in monsters_data.items() if v['name'] == monster['name']), None)
            if loot_key and monsters_data[loot_key].get('loot'):
                 for item_loot_key in monsters_data[loot_key]['loot']:
                     if len(player.inventory) < player.inventory_limit():
                         player.inventory.append(items[item_loot_key])
                         fight_log.append(f"–í—ã –Ω–∞—à–ª–∏: {items[item_loot_key]}")
                     else:
                         fight_log.append(f"–í—ã –Ω–∞—à–ª–∏ {items[item_loot_key]}, –Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–∞!")

            # --- –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –ö–∞–ø–∏—Ç–∞–Ω ---
            if monster.get('is_boss'):
                 user_state['captain_defeated'] = True
                 fight_log.append("–ü—É—Ç—å –Ω–∞ –º–æ—Å—Ç–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω!")
                 # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥–∞–¥–∫–µ
                 await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(fight_log))
                 await asyncio.sleep(2)
                 await start_bridge_puzzle(update, context, chat_id, message_id_to_edit)
                 user_state['current_monster'] = None # –£–±–∏—Ä–∞–µ–º –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                 return

            # –û–±—ã—á–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
            user_state['current_monster'] = None
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(fight_log))
            await asyncio.sleep(2)
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –±–æ—è
            progress_msgs = progress_status_bot(user_state)
            if progress_msgs:
                 await context.bot.send_message(chat_id, "\n".join(progress_msgs))
                 await asyncio.sleep(1.5)

            await show_main_screen(update, context, chat_id)
            return

    elif action == "flee":
        escape_chance = 60
        if random.randint(1, 100) <= escape_chance:
            fight_log.append("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!")
            user_state['current_monster'] = None
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(fight_log))
            await asyncio.sleep(1.5)
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø–æ–±–µ–≥–∞
            progress_msgs = progress_status_bot(user_state)
            if progress_msgs:
                 await context.bot.send_message(chat_id, "\n".join(progress_msgs))
                 await asyncio.sleep(1.5)
            await show_main_screen(update, context, chat_id)
            return
        else:
            fight_log.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!")
            # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–±–µ–≥–∞

    # –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –∂–∏–≤ –∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–±–µ–∂–∞–ª/–Ω–µ –ø–æ–±–µ–¥–∏–ª)
    if monster['health'] > 0:
        monster_damage = monster['damage']
        if player.has_armor:
            reduction = 0.3
            monster_damage = int(monster_damage * (1 - reduction))
            fight_log.append("–ë—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞.")
        player.health -= monster_damage
        player.health = max(0, player.health)
        fight_log.append(f"{monster['name']} –Ω–∞–Ω–æ—Å–∏—Ç –≤–∞–º {monster_damage} —É—Ä–æ–Ω–∞!")

        if not player.is_alive():
            fight_log.append(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.health}%")
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text='\n'.join(fight_log))
            await asyncio.sleep(1.5)
            await send_game_over(update, context, chat_id, "player_dead")
            return

    # –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = get_status_text(player)
    fight_keyboard = build_fight_keyboard()
    await context.bot.edit_message_text(
        chat_id=chat_id, message_id=message_id_to_edit,
        text=f"{'\n'.join(fight_log)}\n\n{status_text}",
        reply_markup=fight_keyboard
    )


async def handle_inventory_action(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, callback_data: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–æ—Ç–∫—Ä—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ)."""
    user_state = get_user_state(chat_id)
    player = user_state['player']
    message_id_to_edit = user_state.get('last_message_id')

    if callback_data == "inventory_open":
        inventory_keyboard = build_inventory_keyboard(player)
        await context.bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id_to_edit,
            reply_markup=inventory_keyboard
        )
        user_state['expected_input'] = 'item'
    elif callback_data == "inventory_close":
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await show_main_screen(update, context, chat_id, message_id_to_edit)
    elif callback_data.startswith("item_use_"):
        item_index = int(callback_data.split("_")[-1])
        if 0 <= item_index < len(player.inventory):
            item_to_use = player.inventory.pop(item_index)
            use_message = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: {item_to_use}."
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            if item_to_use == items["water"]:
                player.thirst = max(player.thirst - 40, 0)
                use_message += " –ñ–∞–∂–¥–∞ —É—Ç–æ–ª–µ–Ω–∞."
            elif item_to_use == items["food"]:
                player.hunger = max(player.hunger - 40, 0)
                use_message += " –ì–æ–ª–æ–¥ —É—Ç–æ–ª–µ–Ω."
            elif item_to_use == items["medkit"]:
                player.health = min(player.health + 50, 100)
                use_message += " –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
            elif item_to_use == items["antivirus"]:
                player.infection = max(player.infection - 60, 0)
                use_message += " –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞ –∑–∞–º–µ–¥–ª–µ–Ω–æ."
            else: # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫
                 use_message = f"{item_to_use} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é."
                 player.inventory.insert(item_index, item_to_use) # –í–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text=use_message)
            await asyncio.sleep(1.5)
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            progress_msgs = progress_status_bot(user_state)
            if progress_msgs:
                 await context.bot.send_message(chat_id, "\n".join(progress_msgs))
                 await asyncio.sleep(1.5)

            await show_main_screen(update, context, chat_id)
        else:
            await context.bot.answer_callback_query(update.callback_query.id, "–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await show_main_screen(update, context, chat_id, message_id_to_edit) # –í–µ—Ä–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    elif callback_data.startswith("info_"): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
         query = update.callback_query
         if "inventory_empty" in callback_data:
             await query.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", show_alert=True)
         elif "item_passive" in callback_data:
             await query.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ.", show_alert=True)
         elif "bridge_locked" in callback_data:
              await query.answer("–¢–µ—Ä–º–∏–Ω–∞–ª –º–æ—Å—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.", show_alert=True)


async def start_bridge_puzzle(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id_to_edit: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥–∞–¥–∫—É –Ω–∞ –º–æ—Å—Ç–∏–∫–µ."""
    user_state = get_user_state(chat_id)
    user_state['expected_input'] = 'puzzle_code'
    user_state['puzzle_attempts_left'] = 3
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
    if user_state.get('puzzle_code') is None:
         user_state['puzzle_code'] = str(random.randint(1000, 9999))
         logger.info(f"Generated puzzle code for {chat_id}: {user_state['puzzle_code']}") # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    puzzle_text = (
        "–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É –º–æ—Å—Ç–∏–∫–∞.\n"
        "–ù–∞ —ç–∫—Ä–∞–Ω–µ –º–µ—Ä—Ü–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ [{user_state['puzzle_attempts_left']} –ø–æ–ø—ã—Ç–∫{'–∞' if user_state['puzzle_attempts_left']==1 else '–∏'}]:"
    )
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∂–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await context.bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id_to_edit,
        text=puzzle_text,
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )

async def handle_puzzle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏."""
    chat_id = update.effective_chat.id
    user_state = get_user_state(chat_id)
    message_id_to_edit = user_state.get('last_message_id') # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞

    if user_state.get('expected_input') != 'puzzle_code':
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–æ–¥
        return

    attempt = update.message.text.strip()
    result_message = ""

    if not attempt.isdigit() or len(attempt) != 4:
        result_message = "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä.\n"
        # –ù–µ —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    else:
        user_state['puzzle_attempts_left'] -= 1
        correct_code = user_state.get('puzzle_code', '????') # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if attempt == correct_code:
            result_message = (
                "\n[–ö–û–î –ü–†–ò–ù–Ø–¢]\n"
                "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–∏—Ä–µ–Ω—ã –≤–∑–≤—ã–ª–∏!\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–ø—Å—É–ª—ã!"
            )
            await context.bot.send_message(chat_id, result_message)
            await asyncio.sleep(2)
            await send_game_over(update, context, chat_id, "win_bridge")
            return # –ò–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞
        else:
            result_message = "[–î–û–°–¢–£–ü –û–¢–ö–õ–û–ù–ï–ù]\n"
            if user_state['puzzle_attempts_left'] > 0:
                # –ü–æ–¥—Å–∫–∞–∑–∫–∞
                if int(attempt) < int(correct_code):
                    result_message += "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –±–æ–ª—å—à–µ.\n"
                else:
                    result_message += "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ó–∞–≥–∞–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –º–µ–Ω—å—à–µ.\n"
                result_message += f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {user_state['puzzle_attempts_left']}"
            else:
                result_message += "–ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –¢–µ—Ä–º–∏–Ω–∞–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è!"
                user_state['bridge_puzzle_attempted'] = True # –û—Ç–º–µ—á–∞–µ–º –Ω–µ—É–¥–∞—á—É

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ª–∏–±–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞, –ª–∏–±–æ —Å–æ–æ–±—â–∞–µ–º –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    if user_state['puzzle_attempts_left'] > 0 and (attempt.isdigit() and len(attempt) == 4):
         # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Å–Ω–æ–≤–∞
         await context.bot.send_message(chat_id, result_message + "\n\n–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")
         # –ù–µ –º–µ–Ω—è–µ–º expected_input, –≤—Å–µ –µ—â–µ –∂–¥–µ–º –∫–æ–¥
    else:
         # –ü–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
         await context.bot.send_message(chat_id, result_message)
         user_state['expected_input'] = None # –ë–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º –∫–æ–¥
         await asyncio.sleep(2)
         await show_main_screen(update, context, chat_id) # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
    chat_id = query.message.chat_id
    callback_data = query.data
    user_state = get_user_state(chat_id) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    logger.info(f"Callback from {chat_id}: {callback_data}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥ (–±–∞–∑–æ–≤–∞—è)
    current_expected = user_state.get('expected_input')

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback_data ---
    if callback_data.startswith("loc_") and current_expected == 'location':
        loc_key = callback_data.split("_")[1]
        await handle_location_choice(update, context, chat_id, loc_key)
    elif callback_data.startswith("fight_") and current_expected == 'fight':
        action = callback_data.split("_")[1]
        await handle_fight_action(update, context, chat_id, action)
    elif (callback_data.startswith("inventory_") or callback_data.startswith("item_") or callback_data.startswith("info_item")) \
         and (current_expected == 'location' or current_expected == 'item'): # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –∏–∑ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ
        await handle_inventory_action(update, context, chat_id, callback_data)
    elif callback_data.startswith("info_"): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö –∏–Ω—Ñ–æ-–∫–Ω–æ–ø–æ–∫
         await handle_inventory_action(update, context, chat_id, callback_data) # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è info_*
    else:
        logger.warning(f"Unexpected callback '{callback_data}' for state '{current_expected}' from {chat_id}")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        await query.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


async def send_game_over(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, reason: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    user_state = game_states.get(chat_id)
    if not user_state: return # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ

    player = user_state['player']
    elapsed_time = int(time.time() - user_state['start_time'])
    final_message = "=== –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê ===\n"

    if reason == "win_bridge":
        final_message += (
            "\n–°–∏—Ä–µ–Ω—ã –≤–æ—é—Ç! –¢–∞–π–º–µ—Ä —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!\n"
            "–í—ã –±–µ–∂–∏—Ç–µ –∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–ø—Å—É–ª–µ –∏ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É —Å—Ç–∞—Ä—Ç—É–µ—Ç–µ...\n"
            "–°—Ç–∞–Ω—Ü–∏—è '–ì–µ–ª–∏–æ—Å-9' –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–∑–∞–¥–∏ –≤–∞—Å —è—Ä–∫–æ–π –≤—Å–ø—ã—à–∫–æ–π!\n\n"
            "üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–ë–ï–î–û–ô! üéâ"
        )
    elif reason == "player_dead":
        final_message += "\n–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ '–ì–µ–ª–∏–æ—Å-9'.\n–ü—Ä–∏—á–∏–Ω–∞: "
        if player.health <= 0: final_message += "–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–Ω—ã."
        elif player.hunger >= 100: final_message += "–°–º–µ—Ä—Ç—å –æ—Ç –≥–æ–ª–æ–¥–∞."
        elif player.thirst >= 100: final_message += "–°–º–µ—Ä—Ç—å –æ—Ç –∂–∞–∂–¥—ã."
        elif player.infection >= 100: final_message += "–ò–Ω—Ñ–µ–∫—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–º."
        elif player.radiation >= 100: final_message += "–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –¥–æ–∑–∞ —Ä–∞–¥–∏–∞—Ü–∏–∏."
        else: final_message += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞."
        final_message += "\n\nüíÄ –ö–û–ù–ï–¶ –ò–ì–†–´ üíÄ"
    elif reason == "time_out":
        final_message += (
             "\n–í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–∏—Å—Ç–µ–º—ã –∂–∏–∑–Ω–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ.\n"
             "–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —Å–ø–∞—Å—Ç–∏—Å—å –≤–æ–≤—Ä–µ–º—è.\n\n"
             "üíÄ –ö–û–ù–ï–¶ –ò–ì–†–´ üíÄ"
        )
    else:
        final_message += "\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ."

    final_message += f"\n\n–í—Ä–µ–º—è –≤—ã–∂–∏–≤–∞–Ω–∏—è: {elapsed_time} —Å–µ–∫—É–Ω–¥."
    final_message += "\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start"

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    last_msg_id = user_state.get('last_message_id')
    if last_msg_id:
        try:
            await context.bot.delete_message(chat_id, last_msg_id)
        except Exception: pass

    await context.bot.send_message(chat_id, final_message)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if chat_id in game_states:
        del game_states[chat_id]
    logger.info(f"Game over for user {chat_id}. Reason: {reason}")


# ======================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê
# ======================================================

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å /help, /status –∏ —Ç.–¥.

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∑–∞–≥–∞–¥–∫–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_puzzle_input))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling()

if __name__ == "__main__":
    main()
